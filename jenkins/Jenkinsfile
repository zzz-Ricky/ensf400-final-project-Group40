pipeline {
  agent any

  environment {
    HTTP_PROXY = 'http://127.0.0.1:9888'
    JAVA_HOME = '/usr/lib/jvm/java-17-openjdk'
    PATH = "${JAVA_HOME}/bin:${PATH}"
    GITHUB_TOKEN = credentials('github-token')
    GITHUB_REPO = 'ensf400-final-project-Group40'
    GITHUB_ACCOUNT = 'zzz-Ricky'
  }

  stages {

    stage('Build') {
      environment {
        JAVA_HOME = '/usr/lib/jvm/java-11-openjdk'
        PATH = "${JAVA_HOME}/bin:${PATH}"
      }
      steps {
        githubNotify context: 'Build', status: 'PENDING', description: 'Build started',

        sh './gradlew clean assemble'
      }
      post {
        success {
          githubNotify context: 'Build', status: 'SUCCESS', description: 'Build successful',
                       repo: env.GITHUB_REPO, credentials: env.GITHUB_TOKEN,
                       account: env.GITHUB_ACCOUNT, sha: env.GIT_COMMIT
        }
        failure {
          githubNotify context: 'Build', status: 'FAILURE', description: 'Build failed',
                       repo: env.GITHUB_REPO, credentials: env.GITHUB_TOKEN,
                       account: env.GITHUB_ACCOUNT, sha: env.GIT_COMMIT
        }
      }
    }

    stage('Unit Tests') {
      environment {
        JAVA_HOME = '/usr/lib/jvm/java-11-openjdk'
        PATH = "${JAVA_HOME}/bin:${PATH}"
      }
      steps {
        githubNotify context: 'Unit Tests', status: 'PENDING', description: 'Unit tests running',
 
        sh './gradlew test'
      }
      post {
        always {
          junit 'build/test-results/test/*.xml'
        }
        success {
          githubNotify context: 'Unit Tests', status: 'SUCCESS', description: 'Unit tests passed',
                       repo: env.GITHUB_REPO, credentials: env.GITHUB_TOKEN,
                       account: env.GITHUB_ACCOUNT, sha: env.GIT_COMMIT
        }
        failure {
          githubNotify context: 'Unit Tests', status: 'FAILURE', description: 'Unit tests failed',
                       repo: env.GITHUB_REPO, credentials: env.GITHUB_TOKEN,
                       account: env.GITHUB_ACCOUNT, sha: env.GIT_COMMIT
        }
      }
    }

    stage('Database Tests') {
      environment {
        JAVA_HOME = '/usr/lib/jvm/java-11-openjdk'
        PATH = "${JAVA_HOME}/bin:${PATH}"
      }
      steps {
        githubNotify context: 'Database Tests', status: 'PENDING', description: 'Database tests running',
 
        sh './gradlew integrate'
      }
      post {
        always {
          junit 'build/test-results/integrate/*.xml'
        }
        success {
          githubNotify context: 'Database Tests', status: 'SUCCESS', description: 'Database tests passed',
                       repo: env.GITHUB_REPO, credentials: env.GITHUB_TOKEN,
                       account: env.GITHUB_ACCOUNT, sha: env.GIT_COMMIT
        }
        failure {
          githubNotify context: 'Database Tests', status: 'FAILURE', description: 'Database tests failed',
                       repo: env.GITHUB_REPO, credentials: env.GITHUB_TOKEN,
                       account: env.GITHUB_ACCOUNT, sha: env.GIT_COMMIT
        }
      }
    }

    stage('BDD Tests') {
      environment {
        JAVA_HOME = '/usr/lib/jvm/java-11-openjdk'
        PATH = "${JAVA_HOME}/bin:${PATH}"
      }
      steps {
        githubNotify context: 'BDD Tests', status: 'PENDING', description: 'BDD tests running',
 
        sh './gradlew generateCucumberReports'
        sh './gradlew jacocoTestReport'
      }
      post {
        always {
          junit 'build/test-results/bdd/*.xml'
        }
        success {
          githubNotify context: 'BDD Tests', status: 'SUCCESS', description: 'BDD tests passed',
                       repo: env.GITHUB_REPO, credentials: env.GITHUB_TOKEN,
                       account: env.GITHUB_ACCOUNT, sha: env.GIT_COMMIT
        }
        failure {
          githubNotify context: 'BDD Tests', status: 'FAILURE', description: 'BDD tests failed',
                       repo: env.GITHUB_REPO, credentials: env.GITHUB_TOKEN,
                       account: env.GITHUB_ACCOUNT, sha: env.GIT_COMMIT
        }
      }
    }

    stage('Static Analysis') {
      environment {
        JAVA_HOME = '/usr/lib/jvm/java-11-openjdk'
        PATH = "${JAVA_HOME}/bin:${PATH}"
      }
      steps {
        githubNotify context: 'Static Analysis', status: 'PENDING', description: 'Static analysis running',
 
        sh './gradlew sonarqube -Dsonar.host.url=http://sonarqube:9000 -Dsonar.login="admin" -Dsonar.password="ensf400"'
      }
      post {
        success {
          githubNotify context: 'Static Analysis', status: 'SUCCESS', description: 'Analysis passed',
                       repo: env.GITHUB_REPO, credentials: env.GITHUB_TOKEN,
                       account: env.GITHUB_ACCOUNT, sha: env.GIT_COMMIT
        }
        failure {
          githubNotify context: 'Static Analysis', status: 'FAILURE', description: 'Analysis failed',
                       repo: env.GITHUB_REPO, credentials: env.GITHUB_TOKEN,
                       account: env.GITHUB_ACCOUNT, sha: env.GIT_COMMIT
        }
      }
    }

    stage('Deploy to Prod') {
      steps {
        githubNotify context: 'Deploy', status: 'PENDING', description: 'Deploying to production',
 
        sh 'sleep 5'
      }
      post {
        success {
          githubNotify context: 'Deploy', status: 'SUCCESS', description: 'Deployment complete',
                       repo: env.GITHUB_REPO, credentials: env.GITHUB_TOKEN,
                       account: env.GITHUB_ACCOUNT, sha: env.GIT_COMMIT
        }
        failure {
          githubNotify context: 'Deploy', status: 'FAILURE', description: 'Deployment failed',
                       repo: env.GITHUB_REPO, credentials: env.GITHUB_TOKEN,
                       account: env.GITHUB_ACCOUNT, sha: env.GIT_COMMIT
        }
      }
    }
  }
}